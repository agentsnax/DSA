#include<stdio.h>
#include<conio.h>
#include<alloc.h>
struct BST
{
	int data;
	struct BST *left, *right; 
};

struct BST *root =NULL;
struct BST *getMode(int data)
{
	struct BST *newMode=(struct BST*)malloc(sizeof(struct BST)); 
	newMode->data = data;
	newMode->left =newMode->right = NULL;
	return newMode;
}

struct BST *insert(struct BST *root, int value)
{
	if(root == NULL)
	{
		root = getMode(value);
	}
	else

	{
	if(value<root->data) 
	root->left =insert(root->left, value);
	else 
	root->right = insert(root->right, value);
	}
	return root;
}

void inorder(struct BST *root)
{ 
	if(root!=NULL)
	{
		inorder(root->left); 
		printf("%d",root->data); 
		inorder(root->right);
	}

} 
void preorder(struct BST *root)

{ 
	if(root!=NULL)
	{
	printf("%d", root->data); 
	preorder(root->left); 
	preorder(root->right);
	} 
}

void postorder(struct BST *root) 
{
	if(root!=NULL)
	{
	preorder(root->left); 
	preorder(root->right); 
	printf("%d",root->data);
	}
}

void main()
{
int ch, val;
clrscr();
do

{
printf("\n**MAIN MENU**\N");

printf("\n 1.INSERT ELEMENT \n 2. PREORDER TRAVERSAL\n");

printf("\n EXIT \n");

printf("\n 3.INORDER TRAVERSAL \n 4. POSTORDER TRAVERSAL\n");

printf("enter your choice");

scanf("%d", &ch);

switch(ch)

{

	case 1:
		printf("Enter value of new mode");
		scanf("%d",&val);
		root = insert(root, val);
		break;
	case 2:
		printf("Elements of the tree are: "); 
		preorder(root);
		break;
	case 3:
		printf("Elements of the tree are: "); 
		inorder(root);
		break;
	case 4:
		printf("Elements of the tree are");
		postorder(root);
		break;
	case 5:
		exit(0);	
		break;
	default:		
		printf(" Invalid input ");

	}
	}
	while((ch<=5)&&(ch>=1));

}